-*- Text -*- 


* design issues

What API to export?  Not interested, really, in supporting the full
symbolics stack-groups crud (whostate, run-reasons, etc).  Basic
thread control functions would be nice

make-thread
kill-thread (with signal?)
current-thread-id
current-thread-handle
suspend/resume?  deadlock-prone, though.  having them block on locks
 would be nicer

Even if we don't provide one, some higher level process glue will want
to slap extra stuff (thread names, for example) around us.  One
possible approach is that taken by corman, where the acl-like
MP package keeps a hash table of thread id -> 'process' 

What to do with the debugger?  Each thread can rebind *debug-io*,
which provided we actually _use_ it for debugging (need to check this)
absolves us of the need to care too much


* seriously broken : affecting correct running

14) allocation/gc still needs locking.

a) lots of threads can allocate at once, if allocation happens
 within an open region
b) but creating a new region must be a one-at-a-time operation
c) if any thread is allocating, no thread is allowed to gc

Note that this means we have to be careful about calling gc from
within the allocator: the check for need-to-gc must happen in such a
way that the allocator lock is free before gc is triggered.  Ideally,
the allocation attempt should then be repeated after the gc has
finished.

10) locking, in general

* broken but uninteresting or cosmetic

2) grow tlv when full

12) fix ROOM

13) fix other runtime stuff that has been temporarily ripped out
 - control stack scrubbing and bounds checking

* code cleanup

17) code in target-thread.lisp, thread.c, x86/system.lisp (interrupt
contexts) has brittle dependency on thread.h

20) read genesis again and convince ourselves it does actually work

15) it would be nice to have a faster way to find the current thread
    from C than calling getpid().  For x86 we can write a bit of asm
    to find the thread pointer in dynamic_values_start[1] and have it
    stored there at thread init.  For other ports something more
    complicated needs doing, unless we can find a register to use for
    the tls base that C promises not to overwrite.  

18) do we need per-thread alien stack anyway? remembering that alien
    code runs on the control stack, there seem to be only a few palces
    this area gets used at all

22) allocate-on-same-page stuff in gc_find_freeish_pages needs
    re-enabling to avoid massive heap fragmentation

